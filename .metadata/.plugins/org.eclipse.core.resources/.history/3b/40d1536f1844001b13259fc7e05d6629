package edu.uwm.cs351;

import java.io.BufferedInputStream;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import com.sun.tools.javac.util.ArrayUtils;

import edu.uwm.cs351.util.Element;
import edu.uwm.cs351.util.SortUtils;
import edu.uwm.cs351.util.XMLParseException;
import edu.uwm.cs351.util.XMLReader;

public class SpellCheck {

	private final String[] dictionary;
	
	public SpellCheck() throws IOException {
		ArrayList<String> temp = new ArrayList<String>();
		InputStream is = new FileInputStream(new File("lib","dictionary.txt"));
		Reader r = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(r);
		String s;
		while ((s = br.readLine()) != null) {
			temp.add(s);
		}
		br.close();
		dictionary = temp.toArray(new String[temp.size()]);
	}
	
	/**
	 * Check the words in the given element.
	 * Return a list of all words that do not occur in the dictionary.
	 * @param e HTML element (ignore script and style tags!)
	 * @return non-null list of all words not occurring in the dictionary.
	 */
	@SuppressWarnings("rawtypes")
	public List<String> check(Element e) {
		// TODO:
		//   Get words in the elements (easiest using a recursive helper)
		//   Sort, uniq, remove correctly spelled ones
		//   Return a list of the remaining.
		//   See java.util.Arrays and also look at methods available for java.util.List
		
		//-------------------- SKELETON CODE-----------//
		
		
	SortUtils <String> wordArray = new SortUtils<String>(strComparator); // a set size, haven't really decided
		String[] output = new String [1000];
		//get every word from e
		// put it into a word array
		//Element newObject;
		//((Object) newObject).mergeSortKeep(0, wordArray.length, wordArray, wordArray.clone());
		//newObject.uniq(0, wordArray.length, wordArray, wordArray);
		
		String[] wordList =  e.toString().split(null); 
		
		String[] arrayNew [] = new String [wordList.length]; 
		wordArray.mergeSort(arrayNew);
		wordArray.uniq(arrayNew);
		wordArray.difference(0, arrayNew.length, 0, dictionary.length, arrayNew, dictionary>length);
	}
	
		
		
	/**
	 * @param args
	 */
	public static void main(String[] args) throws IOException {
		SpellCheck sc = new SpellCheck();
		for (String url : args) {
			System.out.println("Checking spelling of HTML in " + url);
			try {
				Reader r= new InputStreamReader(new BufferedInputStream(new URL(url).openStream()));
				final XMLReader t = new XMLReader(r);
				// t.addCDATA("script");
				Object next = t.readElement();
				if (next instanceof Element) { // could be null
					Element contents = (Element)next;
					if (!contents.getName().equalsIgnoreCase("html")) {
						throw new XMLParseException("element must be HTML not " + contents.getName());
					}
					System.out.println("Mispelled:");
					for (String s : sc.check(contents)) {
						System.out.println("  " + s);
					}
				} else {
					throw new XMLParseException("contents must be HTML, not " + next);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}
